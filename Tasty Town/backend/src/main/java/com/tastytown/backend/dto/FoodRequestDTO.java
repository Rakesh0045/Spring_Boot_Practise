package com.tastytown.backend.dto;


/* 


    BENEFITS OF RECORD
    ------------------
    
--> Provides getter
--> Provides implementation of toString(), equals() & hashCode()
--> Provides all args constructor
--> By default all fields in record class are final hence setter method is not required and not provided
--> The getter methods generated by record class are not prefixed by "get", they are same as field name

 */
public record FoodRequestDTO(
    String foodName,
    String foodDescription,
    double foodPrice,
    String categoryId
) {

} 

/*
 
📥 RequestDTO:

* A class that holds incoming data from the client (like data sent from Postman or frontend).
* Example: When you submit a form with food name, price, and category — it goes into a FoodRequestDTO.

📤 ResponseDTO:

* A class that defines how the API response looks — what fields you want to return to the client.
* Example: After saving the food, you might want to return foodId, foodName, price, and category name.

✅ Why use DTOs at all?

Because DTOs help you in:

🔒 Security:	You don’t expose internal entities (e.g., passwords, internal IDs)
⚙️ Control:	    You can include only the necessary fields in requests and responses
📦 Decoupling:	Your service/entity code is separate from what client sees
🔄 Flexibility:	You can return extra computed fields like full name, discountPrice etc.
🧪 Simplicity:	Makes testing and versioning APIs easier

 */